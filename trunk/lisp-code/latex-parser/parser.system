

(in-package :user)
;;; Since lucid does not seem to be doing this,
;;; I do it here, since I will need it.

(export '(run-program))


;;; introducing a defsystem for parser.
(defsystem parser
  :source-pathname
  (concatenate 'string *lisp-code-directory* "/" "latex-parser")
  :package :user
  :components (
               (:file "buffers")
               (:file "structs")
               (:file "document-component-classes")
               (:file "macros-define-objects.lisp"
                      :depends-on  ("document-component-classes"
                                    "math-classes" )
                      )
               (:file "math-classes"
                      :depends-on  ("document-component-classes"
                                    "operator-class-names-mapping"))
               (:file "operator-class-names-mapping"
                      )
               (:file "parents-and-siblings"
                      :depends-on ("document-component-classes"
                                   "math-classes"))
               (:file "table-driver"
                      :depends-on ("special-variables"
                                   "math-classification"))
               (:file "special-variables")
               (:file "math-classification")
               (:file "01-sections"
                      :depends-on (			  "structs"
							  "document-component-classes"
                                                          "math-classes"
							  "buffers"
							  "special-variables"
							  "math-classification"
							  "table-driver"
							  "02-text-processing"))
               (:file "02-text-processing"
                      :depends-on ("05-math-processing"
                                   "structs"
                                   "document-component-classes"
                                   "math-classes"
                                   "buffers"
                                   "special-variables"
                                   "math-classification"
                                   "table-driver"))
               (:file "03-tex-macro-expand"
                      :depends-on ( 			  "structs"
							  "document-component-classes"
                                                          "math-classes"
							  "buffers"
							  "special-variables"
							  "math-classification"
							  "table-driver"
							  ))
               (:file "05-math-processing"
                      :depends-on (			  "structs"
							  "document-component-classes"
                                                          "math-classes"
							  "buffers"
							  "special-variables"
							  "math-classification"
							  "table-driver"
							  ))
               (:file "interface"
                      :depends-on (			  "structs"
							  "document-component-classes"
                                                          "math-classes"
							  "buffers"
							  "special-variables"
							  "math-classification"
							  "table-driver"
							  "01-sections"
							  "02-text-processing"
							  "03-tex-macro-expand"
							  "05-math-processing"
							  ))
               (:file "precedence-of-operators"
                      :depends-on ("math-classification" ))
               (:file "precedence-definitions"
                      :depends-on ("precedence-of-operators"))
               (:file "quasi-prefix"
                      :depends-on ("05-math-processing"
                                   "math-classes"
                                   "precedence-of-operators"))
               (:file "macro-name-children-and-attributes")
               (:file "children-and-attributes-are-called"
                      :depends-on ("macro-name-children-and-attributes"))
               )
  :depends-on (:clos-helper))
