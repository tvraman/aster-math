
;;; READ-DOCUMENT (file-name)                                        [FUNCTION]
;;;    Reads a lispified document and creates an  article.
;;;
;;; CREATE-ARTICLE (text-article)                                    [FUNCTION]
;;;    Creates an  article from lispified text as generated by lispify.
;;;
;;; PROCESS-INITIAL-BODY! (text-buffer)                              [FUNCTION]
;;;    Process initial  body of the article,  ie upto first section.
;;;
;;; GET-REFERENCES! (text-buffer)                                    [FUNCTION]
;;;    Buffered version. 
;;;
;;; *VALID-SECTIONAL-UNIT-NAMES* "()"                                [VARIABLE]
;;;    list of valid sectioning units
;;;
;;; CHILD-OF-SECTIONAL-UNIT (sectional-unit-name)                    [FUNCTION]
;;;    return name of the child of this unit
;;;
;;; EXISTS-CHILD-OF-SECTIONAL-UNIT? (sectional-unit-name)            [FUNCTION]
;;;    Sees if child posible 
;;;
;;; VALIDATE-SECTIONAL-UNIT-NAME (unit-name)                         [FUNCTION]
;;;    check if unit-name is a valid sectional unit
;;;
;;; CREATE-SECTIONAL-UNIT (sectional-unit-text                       [FUNCTION]
;;;                        &key
;;;                        (sectional-unit-name (quote section)))
;;;    Create a sectional unit, default is a section.
;;;
;;; GET-SECTIONAL-UNITS! (text-buffer                                [FUNCTION]
;;;                       &key
;;;                       (sectional-unit-name (quote section)))
;;;    Gets a list of sectional-units.
;;;    Default is section.
;;;    Leaves the pointer of text buffer pointing at  next unit
;;;
;;; GET-UNIT-TITLE! (text-buffer)                                    [FUNCTION]
;;;    Return first item in buffer and advance pointer if it is a block.
;;;
;;; GET-LABEL! (text-buffer)                                         [FUNCTION]
;;;    Return argument to label if found and advance pointer 
;;;
;;; PROCESS-TEXT (text-buffer                                        [FUNCTION]
;;;               &optional
;;;               (termination-condition?
;;;               (function end-of-buffer?)))
;;;    Takes a buffer  containing text, and  processes it until
;;;    termination-condition is satisfied.  Upon exit, buffer-pointer points
;;;    to after processed text 
;;;
;;; PROCESS-WORD (text-buffer &key (do-not-test nil))                [FUNCTION]
;;;    Process a word 
;;;
;;; PROCESS-COMMENT (text-buffer &key (do-not-test nil))             [FUNCTION]
;;;    Process a comment
;;;
;;; PROCESS-NEWLINE (text-buffer &key (do-not-test nil))             [FUNCTION]
;;;    process newlines 
;;;
;;; PROCESS-ABSTRACT (text-buffer &key (do-not-test nil))            [FUNCTION]
;;;    Process abstract 
;;;
;;; PROCESS-CENTER (text-buffer &key (do-not-test nil))              [FUNCTION]
;;;    process center
;;;
;;; PROCESS-TEXT-BLOCK (text-buffer &key (do-not-test nil))          [FUNCTION]
;;;    a first implementation
;;;
;;; PROCESS-INLINE-QUOTE (text-buffer &key (do-not-test nil))        [FUNCTION]
;;;    process inline quotation
;;;
;;; *VALID-QUOTED-TEXT-TYPES* "()"                                   [VARIABLE]
;;;    list of known quotation types.
;;;
;;; VALIDATE-QUOTED-TEXT-TYPE (quoted-text-type)                     [FUNCTION]
;;;    validate quoted-text-type
;;;
;;; CREATE-QUOTED-TEXT (quote                                        [FUNCTION]
;;;                     &key
;;;                     (quoted-text-type (quote inline-quote)))
;;;    Create a quoted text object
;;;
;;; PROCESS-QUOTE (text-buffer &key (do-not-test nil))               [FUNCTION]
;;;    process   quote
;;;
;;; PROCESS-QUOTATION (text-buffer &key (do-not-test nil))           [FUNCTION]
;;;    process   quotation
;;;
;;; PROCESS-NEW-ENVIRONMENT (text-buffer &key (do-not-test nil))     [FUNCTION]
;;;    process an unknown latex environment
;;;
;;; PROCESS-INLINE-MATH (text-buffer &key (do-not-test nil))         [FUNCTION]
;;;    Process in line math
;;;
;;; PROCESS-DISPLAY-MATH (text-buffer &key (do-not-test nil))        [FUNCTION]
;;;    Process display math
;;;
;;; PROCESS-CS (text-buffer &key (do-not-test nil))                  [FUNCTION]
;;;    Process cs found in  current position in buffer
;;;
;;; EXPAND-TEX-MACRO (text-buffer)                                   [FUNCTION]
;;;    process tex macro
;;;
;;; PROCESS-ARRAY (text-buffer &key (do-not-test nil))               [FUNCTION]
;;;    Process an array 
;;;
;;; PROCESS-TABULAR (text-buffer &key (do-not-test nil))             [FUNCTION]
;;;    Process a table 
;;;
;;; *VALID-LIST-ENVIRONMENT-TYPES* "()"                              [VARIABLE]
;;;    valid types of list environments 
;;;
;;; VALIDATE-LIST-ENVIRONMENT-TYPE (list-environment-type)           [FUNCTION]
;;;    validate list environment type
;;;
;;; CREATE-LIST-ENVIRONMENT (list-of-items                           [FUNCTION]
;;;                          &key
;;;                          (list-environment-type
;;;                          (quote enumerated-list)))
;;;    Create a list environment of specified type,
;;;    default is enumerated list.
;;;
;;; PROCESS-ENUMERATE (text-buffer &key (do-not-test nil))           [FUNCTION]
;;;    Process enumerated list of items 
;;;
;;; PROCESS-DESCRIPTION (text-buffer &key (do-not-test nil))         [FUNCTION]
;;;    process a latex description environment 
;;;
;;; PROCESS-ITEMIZE (text-buffer &key (do-not-test nil))             [FUNCTION]
;;;    process a latex   itemize environment 
;;;
;;; PROCESS-ITEM (text-buffer &key (do-not-test nil))                [FUNCTION]
;;;    process a latex   item environment 
;;;
;;; PROCESS-EQUATION (text-buffer &key (do-not-test nil))            [FUNCTION]
;;;    process a latex   equation environment 
;;;
;;; PROCESS-EQNARRAY (text-buffer &key (do-not-test nil))            [FUNCTION]
;;;    process a latex   eqnarray environment 
;;;
;;; PROCESS-SLIDE (text-buffer &key (do-not-test nil))               [FUNCTION]
;;;    process a slide
;;;
;;; BLOCK-CONTENTS (item)                                            [FUNCTION]
;;;    returns  all but first element of item which is assumed to be a block
;;;    marked as such by its first element. 
;;;
;;; PROCESS-ARRAY-ELEMENT (element)                                  [FUNCTION]
;;;    process element by passing to process-text
;;;
;;; PROCESS-TABLE-ELEMENT (element)                                  [FUNCTION]
;;;    process a table element
;;;
;;; MAP2-NESTED-LIST (modifier nested-list)                          [FUNCTION]
;;;    map down a nested list
;;;
;;; PROCESS-UNKNOWN-CONSTRUCT (text-buffer &key (do-not-test t))     [FUNCTION]
;;;    Process an unknown construct, ie just stick it in
;;;
;;; IS-A (doc-unit lispified-text)                                   [FUNCTION]
;;;    Checks if lispified-text is a doc-unit.
;;;
;;; IS-A-WORD (lispified-text)                                       [FUNCTION]
;;;    Tests if argument is a word. For the present words are atoms.
;;;
;;; CS-NAME (token)                                                  [FUNCTION]
;;;    Return name of cs where cs is a list of two elements, the marker 'cs
;;;    and the name of the cs. 
;;;
;;; MATH-CS-NAME (token)                                             [FUNCTION]
;;;    return name of math cs
;;;
;;; LATEX-EXPAND (text-buffer)                                       [FUNCTION]
;;;    process latex logo macro
;;;
;;; EG-EXPAND (text-buffer)                                          [FUNCTION]
;;;    expand eg macro
;;;
;;; IT-EXPAND (text-buffer)                                          [FUNCTION]
;;;    italics macro: side effect buffer passed as argument
;;;
;;; BF-EXPAND (text-buffer)                                          [FUNCTION]
;;;    bold face macro: side effect buffer passed as argument
;;;
;;; EM-EXPAND (text-buffer)                                          [FUNCTION]
;;;    emphasize macro: side effect buffer passed as argument
;;;
;;; LARGE-EXPAND (text-buffer)                                       [FUNCTION]
;;;    large font macro: side effect buffer passed as argument
;;;
;;; RM-EXPAND (text-buffer)                                          [FUNCTION]
;;;    roman font macro: side effect buffer passed as argument
;;;
;;; TT-EXPAND (text-buffer)                                          [FUNCTION]
;;;    tt font macro: side effect buffer passed as argument
;;;
;;; SC-EXPAND (text-buffer)                                          [FUNCTION]
;;;    sc macro: side effect buffer passed as argument
;;;
;;; SL-EXPAND (text-buffer)                                          [FUNCTION]
;;;    sl macro side effect buffer passed as argument
;;;
;;; CITE-EXPAND (citation)                                           [FUNCTION]
;;;    process citation
;;;
;;; FOOTNOTE-EXPAND (footnote)                                       [FUNCTION]
;;;    process footnote
;;;
;;; LABEL-EXPAND (label)                                             [FUNCTION]
;;;    process label
;;;
;;; CENTERLINE-EXPAND (centerline)                                   [FUNCTION]
;;;    expand centerline macro
;;;
;;; TITLE-EXPAND (title)                                             [FUNCTION]
;;;    expand title macro.
;;;
;;; AUTHOR-EXPAND (author)                                           [FUNCTION]
;;;    process author macro
;;;
;;; DATE-EXPAND (date)                                               [FUNCTION]
;;;    process date macro
;;;
;;; ADDRESS-EXPAND (address)                                         [FUNCTION]
;;;    process address macro.
;;;
;;; LOOKUP-OPERATOR-WEIGHT (op-string)                               [FUNCTION]
;;;    lookup the weight of corresponding operator in table
;;;
;;; LOOKUP-OPERATOR-N-ARGS (op-string)                               [FUNCTION]
;;;    lookup the number of argument for op-string in table
;;;
;;; LOOKUP-OPERATOR-NAME (op-string)                                 [FUNCTION]
;;;    lookup name in table
;;;
;;; LOOKUP-OPERATOR-STRING (name)                                    [FUNCTION]
;;;    lookup name in table
;;;
;;; INF-TO-PRE (infix-expression)                                    [FUNCTION]
;;;    Convert from infix to prefix
;;;
;;; PROCESS-TERM (infix-expression operators operands)               [FUNCTION]
;;;    Set up recursion,  element in front of list is an operand.
;;;
;;; PROCESS-OPERATOR (infix-expression operators operands)           [FUNCTION]
;;;    Iterate down infix-expression first element is now an operator.
;;;
;;; IS-AN-OPERAND? (token)                                           [FUNCTION]
;;;    Checks if token is a variable ie: not a function.
;;;
;;; IS-AN-OPERATOR? (token)                                          [FUNCTION]
;;;    Checks if token is an operator.
;;;
;;; PUSH-OPERATOR (op operator-stack)                                [FUNCTION]
;;;    push operator on stack
;;;
;;; GET-ARGUMENTS (arg-count operand-stack)                          [FUNCTION]
;;;    get list of arguments from stack and reverse it.
;;;
;;; OPERATOR-ARG-COUNT (operator)                                    [FUNCTION]
;;;    return arg count for operator which is the second element.
;;;
;;; INCREMENT-ARG-COUNT (operator)                                   [FUNCTION]
;;;    increase number of arguments
;;;
;;; PROCESS-MATH (math-buffer                                        [FUNCTION]
;;;               &optional
;;;               (termination-condition?
;;;               (function end-of-buffer?)))
;;;    process math stream
;;;
;;; PROCESS-DELIMITED-EXPRESSION (math-buffer                        [FUNCTION]
;;;                               &key (do-not-test nil))
;;;    process expression delimited by delimiter at front of buffer
;;;
;;; OPEN-DELIMITER? (token)                                          [FUNCTION]
;;;    Checks if token is a delimiter.
;;;
;;; CLOSE-DELIMITER? (token)                                         [FUNCTION]
;;;    checks if token is a close delimiter
;;;
;;; GET-MATH-PARSER (token)                                          [FUNCTION]
;;;    Gets appropriate math mode parsing function from global variable. 
;;;
;;; MARK-AS-PROCESSED (token)                                        [FUNCTION]
;;;    mark token as having been processed
;;;
;;; PROCESSED? (token)                                               [FUNCTION]
;;;    see if token is tagged as having been processed
;;;
;;; PROCESS-MATH-CS (math-buffer &key (do-not-test nil))             [FUNCTION]
;;;    process a tex control sequence in math mode
;;;
;;; PROCESS-SUBFORMULA (math-buffer &key (do-not-test nil))          [FUNCTION]
;;;    Process a subformula 
;;;
;;; GET-MATH-OBJECT! (math-buffer)                                   [FUNCTION]
;;;    Get the math object at front of buffer modifying buffer pointer
;;;
;;; PROCESS-ORDINARY (math-buffer &key (do-not-test nil))            [FUNCTION]
;;;    Process an ordinary math symbol
;;;
;;; PROCESS-BIG-OPERATOR (math-buffer &key (do-not-test nil))        [FUNCTION]
;;;    Process a large operator
;;;
;;; PROCESS-BINARY-OPERATOR (math-buffer &key (do-not-test nil))     [FUNCTION]
;;;    Process a binary operator
;;;
;;; PROCESS-RELATIONAL-OPERATOR (math-buffer                         [FUNCTION]
;;;                              &key (do-not-test nil))
;;;    Process a relational operator
;;;
;;; PROCESS-NEGATION-OPERATOR (math-buffer &key (do-not-test nil))   [FUNCTION]
;;;    Process a negation operator
;;;
;;; PROCESS-ARROW-OPERATOR (math-buffer &key (do-not-test nil))      [FUNCTION]
;;;    Process a arrow operator
;;;
;;; PROCESS-NUMBER (math-buffer &key (do-not-test nil))              [FUNCTION]
;;;    Process a number
;;;
;;; PROCESS-SUPERSCRIPT (math-buffer &key (do-not-test nil))         [FUNCTION]
;;;    Process subscript operator
;;;
;;; PROCESS-SUBSCRIPT (math-buffer &key (do-not-test nil))           [FUNCTION]
;;;    Process subscript operator
;;;
;;; BUFFER (contents pointer local-environment)                     [STRUCTURE]
;;;
;;; PRINT-BUFFER (buffer stream depth)                               [FUNCTION]
;;;    Print a buffer
;;;
;;; POP-NEXT-N-ENTRIES (buff &optional (n 1))                        [FUNCTION]
;;;    Pops off n entries from buffer, reseting the pointer
;;;
;;; POP-CURRENT-ENTRY (buff)                                         [FUNCTION]
;;;    pops current entry off buffer modifyin gpointer
;;;
;;; LOOKAT-CURRENT-ENTRY (buff)                                      [FUNCTION]
;;;    Looks at current entry  in buff. Does not modify pointer
;;;
;;; LOOKAT-NEXT-N-ENTRIES (buff &optional (n 1))                     [FUNCTION]
;;;    Looks at the next n entries in the buffer buff 
;;;
;;; ADVANCE-POINTER (buff)                                           [FUNCTION]
;;;    return buffer after advancing pointer. 
;;;
;;; POP-WHILE-TRUE (text-buffer predicate)                           [FUNCTION]
;;;    Pops off entries reseting pointer while predicate is satisfied.
;;;
;;; POP-WHEN-TRUE (text-buffer predicate)                            [FUNCTION]
;;;    Pops off first entry in buffer reseting pointer if this satisfies
;;;    predicate. 
;;;
;;; END-OF-BUFFER? (buff)                                            [FUNCTION]
;;;    Checks if pointer is at the end of buff
;;;
;;; RESET-POINTER (buff &optional (pos nil))                         [FUNCTION]
;;;    REsets buffer pointer to point to the beginning of buff or pos if
;;;    supplied. 
;;;
;;; MATH ""                                                             [CLASS]
;;;    super class of all mathematical objects
;;;    Superclasses: <none>
;;;    Slots: <none>
;;;
;;; MAKE-MATH "()"                                                   [FUNCTION]
;;;
;;; MATH-P (self)                                                       [MACRO]
;;;
;;; MATH-OPERATOR ""                                                    [CLASS]
;;;    Holds a math-operator of the form a op  b op  c op ...
;;;    Superclasses: MATH
;;;    Slots: 
;;;       NAME
;;;       ASSOCIATIVITY
;;;       OPERANDS
;;;
;;; MAKE-MATH-OPERATOR "()"                                          [FUNCTION]
;;;
;;; MATH-OPERATOR-P (self)                                              [MACRO]
;;;
;;; SUM ""                                                              [CLASS]
;;;    sum of the form a + b + c + ...
;;;    Superclasses: MATH-OPERATOR
;;;    Slots: 
;;;       NAME
;;;       ASSOCIATIVITY
;;;
;;; MAKE-SUM "()"                                                    [FUNCTION]
;;;
;;; SUM-P (self)                                                        [MACRO]
;;;
;;; TIMES ""                                                            [CLASS]
;;;    product of the form a times b times c times ...
;;;    Superclasses: MATH-OPERATOR
;;;    Slots: 
;;;       NAME
;;;       ASSOCIATIVITY
;;;
;;; MAKE-TIMES "()"                                                  [FUNCTION]
;;;
;;; TIMES-P (self)                                                      [MACRO]
;;;
;;; DIFFERENCE ""                                                       [CLASS]
;;;    Difference of the form a - b - c - ...
;;;    Superclasses: MATH-OPERATOR
;;;    Slots: 
;;;       NAME
;;;       ASSOCIATIVITY
;;;
;;; MAKE-DIFFERENCE "()"                                             [FUNCTION]
;;;
;;; DIFFERENCE-P (self)                                                 [MACRO]
;;;
;;; QUOTIENT ""                                                         [CLASS]
;;;    quotient of the form a / b / c / ... Considered left associative
;;;    Superclasses: MATH-OPERATOR
;;;    Slots: 
;;;       NAME
;;;       ASSOCIATIVITY
;;;
;;; MAKE-QUOTIENT "()"                                               [FUNCTION]
;;;
;;; QUOTIENT-P (self)                                                   [MACRO]
;;;
;;; POWER ""                                                            [CLASS]
;;;    exponentiation of the form a power b power c where power is right
;;;    associative. Superclasses: MATH-OPERATOR
;;;    Slots: 
;;;       NAME
;;;       ASSOCIATIVITY
;;;
;;; MAKE-POWER "()"                                                  [FUNCTION]
;;;
;;; POWER-P (self)                                                      [MACRO]
;;;
;;; MATH-VARIABLE ""                                                    [CLASS]
;;;    A math variable with its visual annotations
;;;    Superclasses: MATH
;;;    Slots: 
;;;       NAME
;;;       SUBSCRIPT
;;;       SUPERSCRIPT
;;;       LEFT-SUBSCRIPT
;;;       LEFT-SUPERSCRIPT
;;;       ACCENT
;;;       UNDERBAR
;;;
;;; MAKE-MATH-VARIABLE "()"                                          [FUNCTION]
;;;
;;; MATH-VARIABLE-P (self)                                              [MACRO]
;;;
;;; MATH-FUNCTION ""                                                    [CLASS]
;;;    A Mathematical function of the form name arguments
;;;    Superclasses: MATH
;;;    Slots: 
;;;       NAME
;;;       ARGUMENTS
;;;
;;; MAKE-MATH-FUNCTION "()"                                          [FUNCTION]
;;;
;;; MATH-FUNCTION-P (self)                                              [MACRO]
;;;
;;; SIN-FUNCTION ""                                                     [CLASS]
;;;    A sin function with args
;;;    Superclasses: MATH-FUNCTION
;;;    Slots: 
;;;       NAME
;;;       N-ARGS
;;;       ARGUMENTS
;;;
;;; MAKE-SIN-FUNCTION "()"                                           [FUNCTION]
;;;
;;; SIN-FUNCTION-P (self)                                               [MACRO]
;;;
;;; COSIN-FUNCTION ""                                                   [CLASS]
;;;    A cosin function with args
;;;    Superclasses: MATH-FUNCTION
;;;    Slots: 
;;;       NAME
;;;       N-ARGS
;;;       ARGUMENTS
;;;
;;; MAKE-COSIN-FUNCTION "()"                                         [FUNCTION]
;;;
;;; COSIN-FUNCTION-P (self)                                             [MACRO]
;;;
;;; TAN-FUNCTION ""                                                     [CLASS]
;;;    A tan function with args
;;;    Superclasses: MATH-FUNCTION
;;;    Slots: 
;;;       NAME
;;;       N-ARGS
;;;       ARGUMENTS
;;;
;;; MAKE-TAN-FUNCTION "()"                                           [FUNCTION]
;;;
;;; TAN-FUNCTION-P (self)                                               [MACRO]
;;;
;;; LOG-FUNCTION ""                                                     [CLASS]
;;;    A log function with args
;;;    Superclasses: MATH-FUNCTION
;;;    Slots: 
;;;       NAME
;;;       N-ARGS
;;;       ARGUMENTS
;;;
;;; MAKE-LOG-FUNCTION "()"                                           [FUNCTION]
;;;
;;; LOG-FUNCTION-P (self)                                               [MACRO]
;;;
;;; MAX-FUNCTION ""                                                     [CLASS]
;;;    A max function with args
;;;    Superclasses: MATH-FUNCTION
;;;    Slots: 
;;;       NAME
;;;       N-ARGS
;;;       ARGUMENTS
;;;
;;; MAKE-MAX-FUNCTION "()"                                           [FUNCTION]
;;;
;;; MAX-FUNCTION-P (self)                                               [MACRO]
;;;
;;; MIN-FUNCTION ""                                                     [CLASS]
;;;    A min function with args
;;;    Superclasses: MATH-FUNCTION
;;;    Slots: 
;;;       NAME
;;;       N-ARGS
;;;       ARGUMENTS
;;;
;;; MAKE-MIN-FUNCTION "()"                                           [FUNCTION]
;;;
;;; MIN-FUNCTION-P (self)                                               [MACRO]
;;;
;;; ABS-FUNCTION ""                                                     [CLASS]
;;;    A abs function with args
;;;    Superclasses: MATH-FUNCTION
;;;    Slots: 
;;;       NAME
;;;       N-ARGS
;;;       ARGUMENTS
;;;
;;; MAKE-ABS-FUNCTION "()"                                           [FUNCTION]
;;;
;;; ABS-FUNCTION-P (self)                                               [MACRO]
;;;
;;; DISPLAY ((node math-operator))                                     [METHOD]
;;;    display a math operator with its arguments
;;;
;;; DISPLAY ((node sum))                                               [METHOD]
;;;    display a sum
;;;
;;; DISPLAY ((node t))                                                 [METHOD]
;;;    display a general object
;;;
;;; DOCUMENT ""                                                         [CLASS]
;;;    The base class for documents.
;;;    Superclasses: <none>
;;;    Slots: <none>
;;;
;;; MAKE-DOCUMENT "()"                                               [FUNCTION]
;;;
;;; DOCUMENT-P (self)                                                   [MACRO]
;;;
;;; ARTICLE ""                                                          [CLASS]
;;;    A document belonging to the article class
;;;    Superclasses: DOCUMENT
;;;    Slots: 
;;;       TITLE
;;;       AUTHOR
;;;       ADDRESS
;;;       DATE
;;;       ABSTRACT
;;;       INITIAL-BODY
;;;       SECTIONAL-UNITS
;;;       REFERENCES
;;;
;;; MAKE-ARTICLE "()"                                                [FUNCTION]
;;;
;;; ARTICLE-P (self)                                                    [MACRO]
;;;
;;; PRINT-OBJECT ((article article) stream)                            [METHOD]
;;;    print-object an article
;;;
;;; SECTIONAL-UNIT ""                                                   [CLASS]
;;;    A sectional unit, such as section, subsection etc.
;;;    Superclasses: DOCUMENT
;;;    Slots: 
;;;       NAME
;;;       TITLE
;;;       LABEL
;;;       BODY
;;;       SECTIONAL-UNITS
;;;
;;; MAKE-SECTIONAL-UNIT (                                            [FUNCTION]
;;;                      &key
;;;                      (sectional-unit-name
;;;                      (quote sectional-unit)))
;;;
;;; SECTIONAL-UNIT-P (self)                                             [MACRO]
;;;
;;; PRINT-OBJECT ((unit sectional-unit) stream)                        [METHOD]
;;;    display a sectional unit
;;;
;;; SECTION ""                                                          [CLASS]
;;;    a section in an article
;;;    Superclasses: SECTIONAL-UNIT
;;;    Slots: 
;;;       NAME
;;;
;;; MAKE-SECTION "()"                                                [FUNCTION]
;;;
;;; SECTION-P (self)                                                    [MACRO]
;;;
;;; SUBSECTION ""                                                       [CLASS]
;;;    A subsection in an article
;;;    Superclasses: SECTIONAL-UNIT
;;;    Slots: 
;;;       NAME
;;;
;;; MAKE-SUBSECTION "()"                                             [FUNCTION]
;;;
;;; SUBSECTION-P (self)                                                 [MACRO]
;;;
;;; SUBSUBSECTION ""                                                    [CLASS]
;;;    a subsubsection in an article
;;;    Superclasses: SECTIONAL-UNIT
;;;    Slots: 
;;;       NAME
;;;
;;; MAKE-SUBSUBSECTION "()"                                          [FUNCTION]
;;;
;;; SUBSUBSECTION-P (self)                                              [MACRO]
;;;
;;; PARAGRAPH ""                                                        [CLASS]
;;;    A paragraph of text.
;;;    Superclasses: DOCUMENT
;;;    Slots: 
;;;       CONTENTS
;;;
;;; MAKE-PARAGRAPH (&key (contents nil))                             [FUNCTION]
;;;
;;; PARAGRAPH-P (self)                                                  [MACRO]
;;;
;;; PRINT-OBJECT ((paragraph paragraph) stream)                        [METHOD]
;;;    display a paragraph
;;;
;;; TEXT-BLOCK ""                                                       [CLASS]
;;;    A block of text with its own local bindings
;;;    Superclasses: DOCUMENT
;;;    Slots: 
;;;       CONTENTS
;;;       LOCAL-ENVIRONMENT
;;;
;;; MAKE-TEXT-BLOCK (&key (contents nil) (local-environment nil))    [FUNCTION]
;;;
;;; TEXT-BLOCK-P (self)                                                 [MACRO]
;;;
;;; PRINT-OBJECT ((text-block text-block) stream)                      [METHOD]
;;;    print a text block
;;;
;;; ABSTRACT ""                                                         [CLASS]
;;;    The abstract of a document
;;;    Superclasses: DOCUMENT
;;;    Slots: 
;;;       CONTENTS
;;;
;;; MAKE-ABSTRACT "()"                                               [FUNCTION]
;;;
;;; ABSTRACT-P (self)                                                   [MACRO]
;;;
;;; LIST-ENVIRONMENT ""                                                 [CLASS]
;;;    Super class for all list environments such as
;;;    enumerated and itemized lists.
;;;    Superclasses: DOCUMENT
;;;    Slots: 
;;;       ITEMS
;;;
;;; MAKE-LIST-ENVIRONMENT (                                          [FUNCTION]
;;;                        &key
;;;                        (list-environment-type
;;;                        (quote enumerated-list)))
;;;
;;; LIST-ENVIRONMENT-P (self)                                           [MACRO]
;;;
;;; ENUMERATED-LIST ""                                                  [CLASS]
;;;    An enumerated list
;;;    Superclasses: LIST-ENVIRONMENT
;;;    Slots: 
;;;       TYPE
;;;
;;; MAKE-ENUMERATED-LIST "()"                                        [FUNCTION]
;;;
;;; ENUMERATED-LIST-P (self)                                            [MACRO]
;;;
;;; ITEMIZED-LIST ""                                                    [CLASS]
;;;    An itemized list
;;;    Superclasses: LIST-ENVIRONMENT
;;;    Slots: 
;;;       TYPE
;;;
;;; MAKE-ITEMIZED-LIST "()"                                          [FUNCTION]
;;;
;;; ITEMIZED-LIST-P (self)                                              [MACRO]
;;;
;;; DESCRIPTION-LIST ""                                                 [CLASS]
;;;    An description list
;;;    Superclasses: LIST-ENVIRONMENT
;;;    Slots: 
;;;       TYPE
;;;
;;; MAKE-DESCRIPTION-LIST "()"                                       [FUNCTION]
;;;
;;; DESCRIPTION-LIST-P (self)                                           [MACRO]
;;;
;;; ITEM ""                                                             [CLASS]
;;;    An item of text 
;;;    Superclasses: DOCUMENT
;;;    Slots: 
;;;       MARKER
;;;       CONTENTS
;;;
;;; MAKE-ITEM "()"                                                   [FUNCTION]
;;;
;;; ITEM-P (self)                                                       [MACRO]
;;;
;;; CENTERED-TEXT ""                                                    [CLASS]
;;;    Centered text
;;;    Superclasses: DOCUMENT
;;;    Slots: 
;;;       CONTENTS
;;;
;;; MAKE-CENTERED-TEXT (&key (contents nil))                         [FUNCTION]
;;;
;;; CENTERED-TEXT-P (self)                                              [MACRO]
;;;
;;; QUOTED-TEXT ""                                                      [CLASS]
;;;    quotations 
;;;    Superclasses: DOCUMENT
;;;    Slots: 
;;;       CONTENTS
;;;
;;; MAKE-QUOTED-TEXT (&key (quoted-text-type (quote inline-quote)))  [FUNCTION]
;;;
;;; QUOTED-TEXT-P (self)                                                [MACRO]
;;;
;;; QUOTE-ENVIRONMENT ""                                                [CLASS]
;;;    the quote environment of latex
;;;    Superclasses: QUOTED-TEXT
;;;    Slots: 
;;;       TYPE
;;;
;;; MAKE-QUOTE-ENVIRONMENT "()"                                      [FUNCTION]
;;;
;;; QUOTE-ENVIRONMENT-P (self)                                          [MACRO]
;;;
;;; QUOTATION-ENVIRONMENT ""                                            [CLASS]
;;;    the quotation environment of latex
;;;    Superclasses: QUOTED-TEXT
;;;    Slots: 
;;;       TYPE
;;;
;;; MAKE-QUOTATION-ENVIRONMENT "()"                                  [FUNCTION]
;;;
;;; QUOTATION-ENVIRONMENT-P (self)                                      [MACRO]
;;;
;;; INLINE-QUOTE ""                                                     [CLASS]
;;;    in-line quote.
;;;    Superclasses: QUOTED-TEXT
;;;    Slots: 
;;;       TYPE
;;;
;;; MAKE-INLINE-QUOTE "()"                                           [FUNCTION]
;;;
;;; INLINE-QUOTE-P (self)                                               [MACRO]
;;;
;;; COMMENT ""                                                          [CLASS]
;;;    A comment in the typesetting source. 
;;;    Superclasses: DOCUMENT
;;;    Slots: 
;;;       CONTENTS
;;;
;;; MAKE-COMMENT (&key (contents nil))                               [FUNCTION]
;;;
;;; COMMENT-P (self)                                                    [MACRO]
;;;
;;; NEW-ENVIRONMENT ""                                                  [CLASS]
;;;    A new environment not previously handled.
;;;    Superclasses: DOCUMENT
;;;    Slots: 
;;;       NAME
;;;       CONTENTS
;;;
;;; MAKE-NEW-ENVIRONMENT (&key (name nil) (contents nil))            [FUNCTION]
;;;
;;; NEW-ENVIRONMENT-P (self)                                            [MACRO]
;;;
;;; TEX-DEFINED-MACRO ""                                                [CLASS]
;;;    a tex macro.
;;;    Superclasses: DOCUMENT
;;;    Slots: 
;;;       NAME
;;;       READ-AS
;;;
;;; MAKE-TEX-DEFINED-MACRO (&key (tex-defined-macro-name nil)        [FUNCTION]
;;;                         (read-as nil))
;;;
;;; TEX-DEFINED-MACRO-P (self)                                          [MACRO]
;;;
;;; CITATION ""                                                         [CLASS]
;;;    A citation in a document.
;;;    Superclasses: DOCUMENT
;;;    Slots: 
;;;       LABEL
;;;
;;; MAKE-CITATION (&key (label nil))                                 [FUNCTION]
;;;
;;; CITATION-P (self)                                                   [MACRO]
;;;
;;; FOOTNOTE ""                                                         [CLASS]
;;;    a footnote
;;;    Superclasses: DOCUMENT
;;;    Slots: 
;;;       LABEL
;;;       TEXT
;;;
;;; MAKE-FOOTNOTE (&key (label nil) (text nil))                      [FUNCTION]
;;;
;;; FOOTNOTE-P (self)                                                   [MACRO]
;;;
;;; SLIDE ""                                                            [CLASS]
;;;    A slide
;;;    Superclasses: DOCUMENT
;;;    Slots: 
;;;       CONTENTS
;;;
;;; MAKE-SLIDE (&key (contents nil))                                 [FUNCTION]
;;;
;;; SLIDE-P (self)                                                      [MACRO]
;;;
;;; MATH ""                                                             [CLASS]
;;;    parent class for math mode.
;;;    Superclasses: DOCUMENT
;;;    Slots: 
;;;       CONTENTS
;;;       TYPE
;;;
;;; MAKE-MATH (&key (contents nil) (type nil))                       [FUNCTION]
;;;
;;; MATH-P (self)                                                       [MACRO]
;;;
;;; *LEX-DIR* "()"                                                   [VARIABLE]
;;;    Directory where the lexer resides
;;;
;;; *LEX-PROGRAM* "()"                                               [VARIABLE]
;;;    The program which does the lexical analysis
;;;
;;; PARSE-ARTICLE (filename)                                         [FUNCTION]
;;;    Parses a Latex article 
;;;
;;; LOADALL "()"                                                     [FUNCTION]
;;;
;;; COMPALL "()"                                                     [FUNCTION]
;;;
;;; READ-FILE (file-name &optional (reader (function read)))         [FUNCTION]
;;;
;;; CLOAD "()"                                                       [FUNCTION]
;;;
;;; *MATH-CLASSIFICATION-TABLE* (make-hash-table :test               [VARIABLE]
;;;                              (function equal))
;;;    Hash table holding classification of symbols in math mode.
;;;
;;; LOOKUP-MATH-CLASSIFICATION (token)                               [FUNCTION]
;;;    lookup classification in hash table.
;;;
;;; DEFINE-MATH-SYMBOL-CLASSIFICATION (symbol classification)           [MACRO]
;;;    Classify symbol as of type classification for math mode
;;;
;;; *PARSER-SOURCE-FILES* "()"                                       [VARIABLE]
;;;    list of files, in the order to load them
;;;
;;; *PARSER-SOURCE-DIRECTORY* "\"/usr/u/raman/lisp-code/latex-parser\""  [VARIABLE]
;;;
;;; *SOUND-DIR* "\"/usr/u/raman/sounds/cues\""                       [VARIABLE]
;;;
;;; *SOUND-FILE* "()"                                                [VARIABLE]
;;;
;;; LOAD-PARSER "()"                                                 [FUNCTION]
;;;
;;; TAG-PARSER "()"                                                  [FUNCTION]
;;;    run etags on all relevant files
;;;
;;; COMPILE-PARSER "()"                                              [FUNCTION]
;;;
;;; PARSER "()"                                                      [FUNCTION]
;;;    compile load and tag parser
;;;
;;; *LATEX-PARSER-PATHNAME* "()"                                     [VARIABLE]
;;;    location of latex parser source
;;;
;;; *PARSER-AUX-FILES* "()"                                          [VARIABLE]
;;;    these files contain variable, structure and class definitions as well
;;;    as auxilliary tools used by the parser
;;;
;;; *PARSER-WORKHORSE* "()"                                          [VARIABLE]
;;;    list of files which do the actual work
;;;
;;; PARSER-FRONT-END* "()"                                           [VARIABLE]
;;;    interface to parser
;;;
;;; PARSER-TEST "()"                                                 [FUNCTION]
;;;    test parser
;;;
;;; PARSER-LOAD-AND-TEST "()"                                        [FUNCTION]
;;;    load and test parser
;;;
;;; *PARSER-SAMPLE* "\"~/lisp-code/samples/latex-sample\""           [VARIABLE]
;;;
;;; *IP-PAPER* "\"~/lisp-code/samples/ip\""                          [VARIABLE]
;;;
;;; *A-EXAM-PAPER* "()"                                              [VARIABLE]
;;;    a exam write up. 
;;;
;;; *DEMO-PAPER* "()"                                                [VARIABLE]
;;;    short demo version of a exam paper.
;;;
;;; LOAD-IT-ALL "()"                                                 [FUNCTION]
;;;
;;; *ART* "()"                                                       [VARIABLE]
;;;    variable to hold parsed article for tests.
;;;
;;; TEST-PARSER (filename)                                           [FUNCTION]
;;;    test parser, parse and place in *art*
;;;
;;; DEMO "()"                                                        [FUNCTION]
;;;    demo for a exam.
;;;
;;; *READER-PERIOD-PAUSE* "()"                                       [VARIABLE]
;;;    period pause used by reader.
;;;
;;; *READER-COMMA-PAUSE* "()"                                        [VARIABLE]
;;;    comma pause used by reader.
;;;
;;; *ARTICLE-CUE* "()"                                               [VARIABLE]
;;;    Cue to use at the start and end of articles.
;;;
;;; *ARTICLE-OPEN-CUE* "()"                                          [VARIABLE]
;;;    open an article
;;;
;;; *ARTICLE-CLOSE-CUE* "()"                                         [VARIABLE]
;;;    close an article.
;;;
;;; *ABSTRACT-CUE* "()"                                              [VARIABLE]
;;;    cue for abstract
;;;
;;; *PARAGRAPH-CUE* "()"                                             [VARIABLE]
;;;    cue to use at the start of a new paragraph.
;;;
;;; *SECTION-CUE* "()"                                               [VARIABLE]
;;;    cue at the beginning of sections.
;;;
;;; *ITEM-CUE* "()"                                                  [VARIABLE]
;;;    Cue for items.
;;;
;;; *NEWLINE-CUE* "()"                                               [VARIABLE]
;;;    Cue for newlines.
;;;
;;; *SLIDE-CUE* "()"                                                 [VARIABLE]
;;;    cue for slides.
;;;
;;; READ-ALOUD (object)                                      [GENERIC FUNCTION]
;;;    read aloud an abject on the multivoice.
;;;
;;; READ-ALOUD (token)                                                 [METHOD]
;;;    default method to read aloud 
;;;
;;; READ-ALOUD ((document document))                                   [METHOD]
;;;    read aloud a document, default method.
;;;
;;; READ-ALOUD ((abstract abstract))                                   [METHOD]
;;;    read out abstract
;;;
;;; *PLAY-SIGNATURE-TUNE* "()"                                       [VARIABLE]
;;;    If t play a tune before and after reading document.
;;;
;;; READ-ALOUD ((article article))                                     [METHOD]
;;;    read aloud an article
;;;
;;; READ-ALOUD ((list list))                                           [METHOD]
;;;    read out contents of a list
;;;
;;; *READ-ALL-TEXT* "()"                                             [VARIABLE]
;;;    If true, read all the text in a document.
;;;
;;; READ-ALOUD ((string string))                                       [METHOD]
;;;    read out a string
;;;
;;; READ-ALOUD ((text-block text-block))                               [METHOD]
;;;    read aloud a text block, not fully implemented
;;;
;;; READ-ALOUD ((paragraph paragraph))                                 [METHOD]
;;;    read aloud a paragraph.
;;;
;;; READ-ALOUD ((list-environment list-environment))                   [METHOD]
;;;    read aloud a list environment.
;;;
;;; READ-ALOUD ((item item))                                           [METHOD]
;;;    read aloud an item.
;;;
;;; READ-ALOUD ((centered-text centered-text))                         [METHOD]
;;;    read aloud centered text.
;;;
;;; READ-ALOUD ((quoted-text quoted-text))                             [METHOD]
;;;    read quoted text
;;;
;;; READ-ALOUD ((sectional-unit sectional-unit))                       [METHOD]
;;;    read sectional-unit
;;;
;;; READ-ALOUD ((section section))                                     [METHOD]
;;;    read aloud a section
;;;
;;; READ-ALOUD ((comment comment))                                     [METHOD]
;;;
;;; READ-ALOUD ((new-environment new-environment))                     [METHOD]
;;;    Read aloud a new environment
;;;
;;; READ-ALOUD ((tex-defined-macro tex-defined-macro))                 [METHOD]
;;;    read aloud a tex macro
;;;
;;; READ-ALOUD ((citation citation))                                   [METHOD]
;;;
;;; READ-ALOUD ((footnote footnote))                                   [METHOD]
;;;    read aloud a footnote.
;;;
;;; READ-ALOUD ((newline (eql (quote newline))))                       [METHOD]
;;;    read aloud new lines
;;;
;;; READ-ALOUD ((slide slide))                                         [METHOD]
;;;    read aloud a slide
;;;
;;; OUTLINE (art)                                                    [FUNCTION]
;;;    outline of art
;;;
;;; *ORCH-FILE* "()"                                                 [VARIABLE]
;;;    the orchestra file
;;;
;;; *SCORE-FILE* "()"                                                [VARIABLE]
;;;    a  score file
;;;
;;; *CSOUND-STREAM* "\"stream connected to csound process\""         [VARIABLE]
;;;
;;; *CSOUND-PROGRAM* "()"                                            [VARIABLE]
;;;    the csound executable
;;;
;;; *CSOUND-REALTIME-ARGS* "()"                                      [VARIABLE]
;;;    command line options to csound for realtime audio performance
;;;
;;; START-CSOUND "()"                                                [FUNCTION]
;;;    start up a csound process ready for realtime synthesis
;;;
;;; STOP-CSOUND "()"                                                 [FUNCTION]
;;;    kill csound 
;;;
;;; TYPE-UNTIL-HUNG (stream)                                         [FUNCTION]
;;;
;;; SEND-COMMAND (stream fmt-str)                                    [FUNCTION]
;;;
;;; *INSTRUMENT* "()"                                                [VARIABLE]
;;;    the default instrument
;;;
;;; *START-TIME* "()"                                                [VARIABLE]
;;;    start time of note
;;;
;;; *DURATION* "()"                                                  [VARIABLE]
;;;    duration of note
;;;
;;; *NOTE* "()"                                                      [VARIABLE]
;;;    default note
;;;
;;; *VOLUME* "()"                                                    [VARIABLE]
;;;    default volume
;;;
;;; PLAY-NOTE (&key (instrument *instrument*)                        [FUNCTION]
;;;            (start-time *start-time*) (duration *duration*)
;;;            (note *note*) (volume *volume*))
;;;    play a note using csound
;;;
;;; *CUES* "()"                                                      [VARIABLE]
;;;    Directory containing sound cues
;;;
;;; PLAY-AUDIO (filename)                                            [FUNCTION]
;;;    play a sparc audio file
;;;
;;; *PROCESSING-FUNCTION-TABLE* "()"                                 [VARIABLE]
;;;    Holds the table of node types and their associated processing
;;;    functions. 
;;;
;;; DEFINE-PARSING-FUNCTION (object parser)                             [MACRO]
;;;    defines a parsing function for object by adding
;;;    a suitable entry to the table *processing-function-table*
;;;
;;; *TEX-MACRO-TABLE* "()"                                           [VARIABLE]
;;;    table to hold entries for known macros.
;;;
;;; DEFINE-TEX-MACRO (macro-name macro-n-args macro-def)                [MACRO]
;;;    Add entry for macro-name to *tex-macro-table*
;;;    the table of known tex macros 
;;;
;;; *TABLE-OF-MATH-FUNCTIONS* "()"                                   [VARIABLE]
;;;    table of known mathematical functions
;;;
;;; DEFINE-MATH-FUNCTION (func-string func-name weight n-args)          [MACRO]
;;;    sets up known math functions as operators for inf-to-pre
;;;
;;; *TABLE-OF-OPERATORS* "()"                                        [VARIABLE]
;;;    Table of known operators.
;;;
;;; DEFINE-MATH-OPERATOR (op-string op-name op-weight op-n-args)        [MACRO]
;;;    define a math operator 
;;;
;;; *TABLE-OF-MATH-DELIMITERS* "()"                                  [VARIABLE]
;;;    table of mathematical delimiters.
;;;
;;; DEFINE-MATH-DELIMITER (open close delimiter-name)                   [MACRO]
;;;    define a math delimiter
;;;
;;; *DO-NOT-SIGNAL-ERROR-ON-UNKNOWN-TEX-MACRO* "()"                  [VARIABLE]
;;;    tell parser to signal error or continue when undefined tex macro
;;;    seen. 
;;;
;;; *RETURN-A-DEFAULT-PARSER* "()"                                   [VARIABLE]
;;;    switch indicating if a default parser is to be returned if none found
;;;    in parse table 
;;;
;;; *CONVERT-TO-INFIX* "()"                                          [VARIABLE]
;;;    If true convert math expressions to infix
;;;
;;; PARSE-TABLE (name parser)                                       [STRUCTURE]
;;;
;;; TEX-MACRO (name number-of-args expand)                          [STRUCTURE]
;;;    Holds the information about a TeX control sequence, ie. a macro
;;;
;;; OPERATOR (string name weight n-args)                            [STRUCTURE]
;;;
;;; MATH-DELIMITER (open close name)                                [STRUCTURE]
;;;
;;; MATH-SYMBOL (name classification)                               [STRUCTURE]
;;;
;;; WHAT-IS? (token)                                                 [FUNCTION]
;;;    returns token marker for lists which is the first element, or word if
;;;    string. 
;;;
;;; MATH-WHAT-IS? (token)                                            [FUNCTION]
;;;    classify token according to math mode
;;;
;;; NUMBER-STRING? (string)                                          [FUNCTION]
;;;    checks if string is a quoted number
;;;
;;; GET-PARSER (token &key (math-flag nil))                          [FUNCTION]
;;;    Get the right parsing function from the global variable 
;;;
;;; GET-TEX-MACRO (macro-name)                                       [FUNCTION]
;;;    gets the entry for macro macro-name from the table
;;;
;;; TOGGLE (global-var)                                                 [MACRO]
;;;    toggle the setting of boolean variables.
;;;