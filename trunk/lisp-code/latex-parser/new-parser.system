

(in-package :user)
;;; Modified: Mon Nov 16 21:17:52 EST 1992
;;; Introducing modules to make logic clear:
;;; old hacked file is in the scratch directory.
;;; cleaning up and moving completely to defsystem.
;;; Modified: Fri Aug 21 14:33:58 EDT 1992

;;; Since lucid does not seem to be doing this,
;;; I do it here, since I will need it.

(export '(run-program))

;;; eventually uncomment the following.

(defvar *parser-source-directory*  "/usr/u/raman/lisp-code/latex-parser")
(defvar *sound-dir* "/usr/u/raman/sounds/cues")

;;; introducing a defsystem for parser.
;;; Modified: Thu Apr  2 19:38:04 EST 1992

;;; Variable: *LATEX-PARSER-PATHNAME*                        Author: raman
;;; Created: Thu Apr  2 19:40:14 1992

(defvar *latex-parser-pathname*   "/home/raman/lisp-code/latex-parser/"
  "location of latex parser source")

;;; }

(defsystem parser
    :source-pathname *latex-parser-pathname*
    :package :user
    :components (
		 (:file "buffers")
		 (:file "structs")
		 (:file "document-component-classes")
                 (:file "math-classes"
                        :depends-on  ("document-component-classes"))
		 (:file "table-driver"
			:depends-on ("special-variables"
				     "math-classification"))
		 (:file "special-variables")
		 (:file "math-classification")
		 (:file "01-sections"
			:depends-on (			  "structs"
							  "document-component-classes"
                                                          "math-classes"
							  "buffers"
							  "special-variables"
							  "math-classification"
							  "table-driver"
							  "02-text-processing"))
		 (:file "02-text-processing"
			:depends-on ("05-math-processing"
				     "structs"
				     "document-component-classes"
                                     "math-classes"
				     "buffers"
				     "special-variables"
				     "math-classification"
				     "table-driver"))
		 (:file "03-tex-macro-expand"
			:depends-on ( 			  "structs"
							  "document-component-classes"
                                                          "math-classes"
							  "buffers"
							  "special-variables"
							  "math-classification"
							  "table-driver"
							  ))
		 (:file "05-math-processing"
			:depends-on (			  "structs"
							  "document-component-classes"
                                                          "math-classes"
							  "buffers"
							  "special-variables"
							  "math-classification"
							  "table-driver"
							  ))
		 (:file "interface"
			:depends-on (			  "structs"
							  "document-component-classes"
                                                          "math-classes"
							  "buffers"
							  "special-variables"
							  "math-classification"
							  "table-driver"
							  "01-sections"
							  "02-text-processing"
							  "03-tex-macro-expand"
							  "05-math-processing"
							  ))
                 (:file "precedence-of-operators"
                        :depends-on ("math-classification" ))
                 (:file "precedence-definitions"
                        :depends-on ("precedence-of-operators"))
                 (:file "quasi-prefix"
                        :depends-on ("05-math-processing"
                                     "math-classes"
                                     "precedence-of-operators"))
		 ))

(defun parser-test ()
  "test parser"
  (parse-article "~/lisp-code/samples/latex-sample"))

(defun parser-load-and-test()
  "load and test parser"
  (load-system 'parser)
  (parser-test))
;;; { more variables

(defvar *parser-sample* "~/lisp-code/samples/latex-sample")
(defvar *ip-paper* "~/lisp-code/samples/ip")


;;; Variable: *A-EXAM-PAPER*                                 Author: raman
;;; Created: Tue May  5 13:12:35 1992

(defvar *a-exam-paper* nil  "a exam write up. ")

(setf *a-exam-paper* "~/lisp-code/samples/a-exam-preparatory-notes.tex" )

;;; Variable: *DEMO-PAPER*                                   Author: raman
;;; Created: Thu May  7 19:05:23 1992

(defvar *demo-paper* nil  "short demo version of a exam paper.")

(setf *demo-paper* "~/lisp-code/samples/demo-a-exam-write-up.tex") 

;;; }





;;; Variable: *ART*                                          Author: raman
;;; Created: Tue May  5 13:15:57 1992

(defvar *art* nil  "variable to hold parsed article for tests.")

(setf *art* nil)

;;; Function: TEST-PARSER                                    Author: raman
;;; Created: Tue May  5 13:15:01 1992

(defun test-parser (filename) 
  "test parser, parse and place in *art*"
  (length (list (setf *art*
		      (parse-article filename))))
  )


;;; Function: DEMO                                           Author: raman
;;; Created: Thu May  7 19:07:24 1992

(defun demo () 
  "demo for a exam."
  (setf *art* (parse-article *demo-paper*))
  (read-aloud *art*)
  )


;;; Parameter: *CURRENT-SAMPLE*                              Author: raman
;;; Created: Fri Aug 28 12:42:45 1992

(defparameter *current-sample*
  "/usr/u/raman/lisp-code/samples/current-sample.tex"
  "this is the current sample to be read")



;;; Variable: *SAMPLE*                                       Author: raman
;;; Created: Fri Aug 28 12:46:33 1992

(defvar *sample*  nil "holds parsed article")
;;; Function: READ-SAMPLE                                    Author: raman
;;; Created: Fri Aug 28 12:43:43 1992

(defun read-sample (&optional (document *current-sample*)) 
  "read current sample"
  (setf *sample* (parse-article document))
  (read-aloud *sample*)
  )
