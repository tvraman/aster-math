
;;; REFERENCE (val)                                                 [STRUCTURE]
;;;
;;; REFERENCE-VALUE ((ordinary t))                                     [METHOD]
;;;    return argument
;;;
;;; REFERENCE-VALUE ((reference reference))                            [METHOD]
;;;    return value of ref
;;;
;;; SYMBOL (&rest args)                                              [FUNCTION]
;;;    Concatenate symbols or strings to form an interned symbol
;;;
;;; *LIST-OF-DIMENSIONS* "()"                                        [VARIABLE]
;;;    list of dimension names that make up the speech space. 
;;;
;;; ADD-DIMENSION (name)                                             [FUNCTION]
;;;    Adds dimension to speech space. 
;;;
;;; *GLOBAL-VALUES* (make-hash-table :test (function equal))         [VARIABLE]
;;;    global parameter settings
;;;
;;; DEFINE-GLOBAL-VALUE (dimension value)                            [FUNCTION]
;;;    assign global value value to dimension dimension  if none already
;;;    defined 
;;;
;;; GET-GLOBAL-VALUE (dimension)                                     [FUNCTION]
;;;    return global value for dimension dimension.
;;;
;;; SET-GLOBAL-VALUE (dimension value)                               [FUNCTION]
;;;    set new global value to set for the first time use
;;;    define-global-value 
;;;
;;; *TABLE-OF-UNITS* (make-hash-table :test (function equal))        [VARIABLE]
;;;    table containing units for each dimension
;;;
;;; DEFINE-UNIT-SIZE (dimension value)                               [FUNCTION]
;;;    adds an entry to table of units for dimension dimension and sets it
;;;    to value value
;;;
;;; GET-UNIT-SIZE (dimension)                                        [FUNCTION]
;;;    retrieve unit for this dimension
;;;
;;; *TABLE-OF-SYNTHESIZER-CODES* (make-hash-table :test              [VARIABLE]
;;;                               (function equal))
;;;    table containing synthesizer codes  for each dimension
;;;
;;; DEFINE-SYNTHESIZER-CODE (dimension value)                        [FUNCTION]
;;;    adds an entry to table of units for dimension dimension and sets it
;;;    to value value
;;;
;;; GET-SYNTHESIZER-CODE (dimension)                                 [FUNCTION]
;;;    retrieve synthesizer code  for this dimension
;;;
;;; *TABLE-OF-STEP-SIZES* (make-hash-table :test (function equal))   [VARIABLE]
;;;    table containing step sizes   for each dimension
;;;
;;; DEFINE-STEP-SIZE (dimension value)                               [FUNCTION]
;;;    adds an entry to table of units for dimension dimension and sets it
;;;    to value value
;;;
;;; GET-STEP-SIZE (dimension)                                        [FUNCTION]
;;;    retrieve unit for this dimension
;;;
;;; SET-STEP-SIZE (dimension step-size)                              [FUNCTION]
;;;    Set global step size for dimension.
;;;
;;; *STANDARD-VOICES* (make-hash-table :test (function equal))       [VARIABLE]
;;;    table of standard voices.
;;;
;;; SAVE-POINT-IN-SPEECH-SPACE (name point)                          [FUNCTION]
;;;    Define point  as a distinguished point in speech space called name.
;;;    Adds name to the table of standard voices.
;;;
;;; DEFINE-STANDARD-VOICE (name &rest settings)                      [FUNCTION]
;;;    Define a standard voice named name using settings which is a list
;;;    of dimension value pairs.
;;;
;;; GET-POINT-IN-SPEECH-SPACE (name)                                 [FUNCTION]
;;;    return predefined point associated with name
;;;
;;; DIMENSION (name value step-size)                                [STRUCTURE]
;;;
;;; CREATE-DIMENSION (name                                           [FUNCTION]
;;;                   &key
;;;                   (value
;;;                   (reference-value (get-global-value name)))
;;;                   (step-size
;;;                   (reference-value (get-step-size name))))
;;;    return a dimension appropriate for dimension name
;;;
;;; *DIMENSION-ACCESSOR-TABLE* (lucid-runtime-support:bq-list        [VARIABLE]
;;;                             (lucid-runtime-support:bq-list
;;;                             (quote value)
;;;                             (function dimension-value)
;;;                             (function
;;;                             (lambda (dimension new-value)
;;;                             (setf (dimension-value dimension)
;;;                             new-value))))
;;;                             (lucid-runtime-support:bq-list
;;;                             (quote step-size)
;;;                             (function dimension-step-size)
;;;                             (function
;;;                             (lambda (dimension new-step-size)
;;;                             (setf
;;;                             (dimension-step-size dimension)
;;;                             new-step-size)))))
;;;    Table of slot names and accessor functions for dimension structure.  
;;;
;;; DIMENSION-ACCESSOR (slot dimension)                              [FUNCTION]
;;;    access slot slot of dimension dimension
;;;
;;; (SETF DIMENSION-ACCESSOR) (new-value)                        [SETF MAPPING]
;;;
;;; DEFINE-POINT-IN-SPEECH-SPACE "()"                                   [MACRO]
;;;    define point in speech space  from dimensions defined so far
;;;
;;; UPDATE-POINT-IN-SPEECH-SPACE (point dim-name dimension)          [FUNCTION]
;;;    set dimension for dim-name to dimension.
;;;
;;; POINT-ACCESSOR (dimension point)                                 [FUNCTION]
;;;    Return value of slot dimension from point
;;;
;;; (SETF POINT-ACCESSOR) (value)                                [SETF MAPPING]
;;;
;;; CREATE-INITIAL-POINT-IN-SPEECH-SPACE "()"                        [FUNCTION]
;;;    create a point in speech space with default settings that have
;;;    global scope
;;;
;;; EMBED-POINT-IN-SPEECH-SPACE (point)                              [FUNCTION]
;;;    Takes a point in speech space and returns a copy with the default
;;;    values assigned for those dimensions that are undefined in point
;;;
;;; CURRENT-VALUE (dimension &optional (point *current-state*))      [FUNCTION]
;;;    Return current value assigned to dimension in this point. default
;;;    point is *current-state* 
;;;
;;; CURRENT-STEP-SIZE (dimension &optional (point *current-state*))  [FUNCTION]
;;;    Return step size assigned to this dimension 
;;;
;;; RE-INITIALIZE-SPEECH-SPACE (&optional (voice (quote paul)))      [FUNCTION]
;;;    reinitialize speech space with voice.
;;;
;;; *DEFAULT-VOICE* (quote paul)                                     [VARIABLE]
;;;    default voice
;;;
;;; INITIALIZE-SPEECH-SPACE (&optional (voice *default-voice*))      [FUNCTION]
;;;    initialize speech space by setting up current state and global
;;;    values. 
;;;
;;; SETUP-GLOBALS (voice)                                            [FUNCTION]
;;;    setup global parameters appropriate to voice named voice.
;;;
;;; DEFINE-GLOBALS (dimension)                                       [FUNCTION]
;;;    defines global values along dimension dimension as specified by the
;;;    argument which is an object of type dimension. 
;;;
;;; REARRANGE-DIMENSIONS-FOR-DECTALK "()"                            [FUNCTION]
;;;    Rearrange dimensions in list-of-dimensions for dectalk so that voice
;;;    is at front
;;;
;;; MOVE-BY (point dimension offset &key (slot (quote value)))       [FUNCTION]
;;;    Move from point along dimension by offset.
;;;
;;; STEP-BY (point dimension number-of-steps                         [FUNCTION]
;;;          &key (slot (quote value)))
;;;    move by number-of-steps along dimension from point.
;;;
;;; MOVE-TO (point dimension value &key (slot (quote value)))        [FUNCTION]
;;;    Move to value along dimension 
;;;
;;; SCALE-BY (point dimension scale-factor                           [FUNCTION]
;;;           &key (slot (quote value)))
;;;    scale dimension by scale factor
;;;
;;; MULTI-MOVE-BY (point &rest settings)                             [FUNCTION]
;;;    Move from point along several dimensions, specify settings as
;;;    dimension value pairs
;;;
;;; MULTI-MOVE-TO (point &rest settings)                             [FUNCTION]
;;;    Move along multiple dimensions, settings specified as dimension value
;;;    pairs 
;;;
;;; MULTI-SCALE-BY (point &rest settings)                            [FUNCTION]
;;;    scale along multiple dimensions, specify settings as dimension value
;;;    pairs 
;;;
;;; MULTI-STEP-BY (point &rest settings)                             [FUNCTION]
;;;    step along multiple dimensions
;;;
;;; *VALID-MOVES* (list (quote move-by) (quote move-to)              [VARIABLE]
;;;                (quote scale-by) (quote step-by))
;;;    valid moves for generalized operator
;;;
;;; GENERALIZED-AFL-OPERATOR (point &rest settings)                  [FUNCTION]
;;;    Operate on point  and return new point. 
;;;
;;; VALID-OPERATOR? (operator)                                       [FUNCTION]
;;;    validate afl operator
;;;
;;; *GLOBAL-STATE* "()"                                              [VARIABLE]
;;;    records global state of afl
;;;
;;; *CURRENT-STATE* "()"                                             [VARIABLE]
;;;    Records current state of the audio formatter 
;;;
;;; *MODIFIED-DIMENSIONS* "()"                                       [VARIABLE]
;;;    Dynamic variable holding list of modified dimensions.
;;;
;;; NEW-BLOCK (&body body)                                              [MACRO]
;;;    sets up a new block in afl
;;;
;;; *CURRENT-EXIT* "()"                                              [VARIABLE]
;;;    special variable to hold exit for blocks
;;;
;;; NAMED-BLOCK (name &body body)                                       [MACRO]
;;;    Blocks with names. 
;;;
;;; EXIT-BLOCK "()"                                                  [FUNCTION]
;;;    exit current block
;;;
;;; *LAZY-SET-STATE* "()"                                            [VARIABLE]
;;;    If t set-state sets all the dimensions, without checking if some
;;;    dimension has actually ben modified. Setting this to t will slow down
;;;    the dectalk.
;;;
;;; *LAZY-SET-STATE-DEFAULT* "()"                                    [VARIABLE]
;;;    default value for *lazy-set-state*
;;;
;;; SET-STATE (state                                                 [FUNCTION]
;;;            &key (changed-dimensions *list-of-dimensions*))
;;;    sets state of audio  formatter to state   after applying final
;;;    scaling 
;;;
;;; WITH-LAZY-SET-STATE (&body body)                                    [MACRO]
;;;    Locally sets *lazy-set-state* to t and executes body and then
;;;    unsets *lazy-set-state*
;;;
;;; LOCAL-SET! (state new-state)                                        [MACRO]
;;;    sets state to new state. Now obselete, replaced by local-set-state
;;;
;;; LOCAL-SET-STATE (new-state)                                         [MACRO]
;;;    Set current state of afl to new-state
;;;
;;; GLOBAL-SET! (state dimension value)                              [FUNCTION]
;;;    globally set value of dimension. Obselete, replaced by
;;;    global-set-state 
;;;
;;; GLOBAL-SET-STATE (afl-state)                                     [FUNCTION]
;;;    set global state of afl
;;;
;;; GLOBAL-SET-VALUE (dimension value)                               [FUNCTION]
;;;    set value globally along dimension
;;;
;;; *BEGIN-COMMAND* "\"[\""                                          [VARIABLE]
;;;    string that begins a synthesizer command
;;;
;;; *END-COMMAND* "\"]\""                                            [VARIABLE]
;;;    string that ends a synthesizer command
;;;
;;; GENERATE-SYNTHESIZER-COMMAND (dimension value)                   [FUNCTION]
;;;    Generates synthesizer command that sets dimension dimension to value
;;;    value 
;;;
;;; *VOICE-CODES-TABLE* "()"                                         [VARIABLE]
;;;    table of voice codes for dectalk
;;;
;;; VOICE-CODE (voice code)                                         [STRUCTURE]
;;;
;;; DEFINE-VOICE-CODE (voice code)                                   [FUNCTION]
;;;    define code as code for voice voice
;;;
;;; GET-VOICE-CODE (voice)                                           [FUNCTION]
;;;    get code for voice
;;;
;;; *DEFAULT-FINAL-SCALE-FACTOR* 1                                   [VARIABLE]
;;;    Default scale factor along all dimensions in speech space
;;;
;;; *TABLE-OF-FINAL-SCALE-FACTORS* (make-hash-table :test            [VARIABLE]
;;;                                 (function equal))
;;;    Table containing global scale factors
;;;
;;; DEFINE-FINAL-SCALE-FACTOR (dimension scale-factor)               [FUNCTION]
;;;    Define global scale factor to be applied to dimension Does nothing
;;;    if scale factor already defined 
;;;
;;; GET-FINAL-SCALE-FACTOR (dimension)                               [FUNCTION]
;;;    Retrieve global scale factor for dimension dimension default is unity
;;;
;;; SET-FINAL-SCALE-FACTOR (dimension scale-factor)                  [FUNCTION]
;;;    Set scale factor for dimension
;;;
;;; REFRESH "()"                                                     [FUNCTION]
;;;    Call this function if the hardware gets out of synch with the current
;;;    state as recorded by afl
;;;
;;; SCALE-POINT-IN-SPEECH-SPACE (point)                              [FUNCTION]
;;;    Apply scaling to a point in speech space
;;;
;;; SCALE-DIMENSION (dimension)                                      [FUNCTION]
;;;    Return a scaled copy of dimension
;;;